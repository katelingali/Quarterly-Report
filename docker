# base image
FROM ubuntu:xenial

# metadata
LABEL base.image="ubuntu:xenial"
LABEL dockerfile.version="1"
LABEL description="An R environment and script for generating a Quarterly Report for CROs"
LABEL website="N/A"
LABEL maintainer="Katelin Gali"
LABEL maintainer.email="katelin.gali@dgs.virginia.gov"

#install RStudio
RUN apt-get update -qq && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y \
    apt-transport-https \
    build-essential \
    curl \
    gfortran \
    libatlas-base-dev \
    libbz2-dev \
    libcairo2 \
    libcurl4-openssl-dev \
    libicu-dev \
    liblzma-dev \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libpcre3-dev \
    libtcl8.6 \
    libtiff5 \
    libtk8.6 \
    libx11-6 \
    libxt6 \
    locales \
    tzdata \
    zlib1g-dev
    
# Install system dependencies for the tidyverse R packages
RUN apt-get install -y \
    make
    libcurl4-openssl-dev
    libssl-dev
    pandoc
    libxml2-dev
    
# install R packages
RUN R -e "install.packages(c('readr',\
  'ggplot2',\
  'tidyr',\
  'knitr',\
  'shiny',\
  'tinytex',\
  'scales',\
  'dplyr'), repos = 'http://cran.us.r-project.org')"
  
# install report repository
#unsure about this
RUN mkdir quarterly_report

#set working directory
WORKDIR /quarterly_report

Template-

# ARG sets environment variables during the build stage
ARG SOFTWARENAME_VER="1.0.0"

# Install and/or setup more things. Make /data for use as a working dir
# Example: ncbi-blast+ 2.9.0
RUN wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.9.0/ncbi-blast-2.9.0+-x64-linux.tar.gz && \
 tar -xzf ncbi-blast-2.9.0+-x64-linux.tar.gz && \
 rm ncbi-blast-2.9.0+-x64-linux.tar.gz && \
 mkdir /data

# ENV instructions set environment variables that persist from the build into the resulting image
# Use for e.g. $PATH and locale settings for compatibility with Singularity
ENV PATH="/ncbi-blast-2.9.0+/bin:$PATH" \
 LC_ALL=C

# WORKDIR sets working directory
WORKDIR /data

# A second FROM insruction creates a new stage
# We use `test` for the test image
FROM app as test

# Demonstrate that the program is successfully installed

# Option 1: run the program's internal tests, for example with SPAdes:
RUN spades.py --test

# Option 2: write your own tests in a bash script in the same directory as your Dockerfile:
COPY my_tests.sh .
RUN bash my_tests.sh


# base image
FROM ubuntu:xenial

# metadata
LABEL base.image="ubuntu:xenial"
LABEL dockerfile.version="1"
LABEL description="An R environment and script for generating a Quarterly Report for CROs"
LABEL website="N/A"
LABEL maintainer="Katelin Gali"
LABEL maintainer.email="katelin.gali@dgs.virginia.gov"

# install R packages
RUN R -e "install.packages(c('readr',\
  'ggplot2',\
  'tidyr',\
  'knitr',\
  'shiny',\
  'tinytex',\
  'scales',\
  'dplyr'), repos = 'http://cran.us.r-project.org')"
  
# install report repository
#unsure about this
RUN mkdir quarterly_report

WORKDIR /quarterly_report


# FROM defines the base docker image. This command has to come first in the file
# The 'as' keyword lets you name the folowing stage. We use `app` for the production image
FROM ubuntu:focal as app

# ARG sets environment variables during the build stage
ARG SOFTWARENAME_VER="1.0.0"


# RUN executes code during the build
# Install dependencies via apt-get or yum if using a centos or fedora base
RUN apt-get update && apt-get install -y \
 dependency_a \
 dependency_b \
 dependency_c

# Install and/or setup more things. Make /data for use as a working dir
# Example: ncbi-blast+ 2.9.0
RUN wget ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.9.0/ncbi-blast-2.9.0+-x64-linux.tar.gz && \
 tar -xzf ncbi-blast-2.9.0+-x64-linux.tar.gz && \
 rm ncbi-blast-2.9.0+-x64-linux.tar.gz && \
 mkdir /data

# ENV instructions set environment variables that persist from the build into the resulting image
# Use for e.g. $PATH and locale settings for compatibility with Singularity
ENV PATH="/ncbi-blast-2.9.0+/bin:$PATH" \
 LC_ALL=C

# WORKDIR sets working directory
WORKDIR /data

# A second FROM insruction creates a new stage
# We use `test` for the test image
FROM app as test

# Demonstrate that the program is successfully installed

# Option 1: run the program's internal tests, for example with SPAdes:
RUN spades.py --test

# Option 2: write your own tests in a bash script in the same directory as your Dockerfile:
COPY my_tests.sh .
RUN bash my_tests.sh

# Option 3: write python unit tests in a tests/ directory in the same directory as your Dockerfile:
RUN apt-get install -y python3
RUN mkdir tests/
COPY tests/ tests/
RUN python3 -m unittest discover -s tests
